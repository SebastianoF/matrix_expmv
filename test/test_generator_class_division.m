% Some tests to stress the generator of matrix divided by classes

% test 0: to be sure we always can get a matrix for each class!

clear
close all


classes = zeros(1,4);

for j=1:1000
    [~, c] = generate_rand_dA();
    classes(c) = classes(c) + 1;
end

figure(2);
bar(classes)
set(gca,'XTickLabel',{'1', '2', '3', '4'});
xlabel('classes');
ylabel('frequency');

% It is correct if it is unbalanced with zero or almost zero elements in
% the class 4
if classes(4) > 10
    disp('test_generator_class_division 0 NOT passed');
else
    disp('test_generator_class_division 0 passed');
end

% test 1: to see if a matrix of a class 1 in input_class is really of this
% class

clear 

cl_input = 1;

dA = generate_rand_dA_cl(cl_input);
S = dA(1:2, 1:2);

e = eig(S); l1 = e(1); l2 = e(2);

ok = 0;

if imag(l1) < (10^4)*eps && imag(l2) < (10^4)*eps
    l1 = real(l1); l2 = real(l2);
    if l1*l2 > 0 
        ok = 1;
    end
end
   
if ok == 0
    disp('test_generator_class_division 1 NOT passed');
elseif ok == 1
    disp('test_generator_class_division 1 passed');
end

% test 2: to see if a matrix of a class 2 in input_class is really of this
% class

clear 

cl_input = 2;

dA = generate_rand_dA_cl(cl_input);
S = dA(1:2, 1:2);

e = eig(S); l1 = e(1); l2 = e(2);

ok = 0;

if imag(l1) < (10^4)*eps && imag(l2) < (10^4)*eps
    l1 = real(l1); l2 = real(l2);
    if l1*l2 < 0 
        ok = 1;
    end
end
   
if ok == 0
    disp('test_generator_class_division 2 NOT passed');
elseif ok == 1
    disp('test_generator_class_division 2 passed');
end

% test 3: to see if a matrix of a class 3 in input_class is really of this
% class

clear 

rng(5);

cl_input = 3;

dA = generate_rand_dA_cl(cl_input);
S = dA(1:2, 1:2);

e = eig(S); 
l1 = e(1); 
l2 = e(2);

ok = 0;

if imag(l1) > (10^4)*eps
    l1 = real(l1);
    if abs(real(l1)) > (10^4)*eps 
        ok = 1;
    end
end
   
if ok == 0
    disp('test_generator_class_division 3 NOT passed');
elseif ok == 1
    disp('test_generator_class_division 3 passed');
end

% test 4: to see if a matrix of a class 3 in input_class is really of this
% class

clear

cl_input = 4;

dA = generate_rand_dA_cl(cl_input);
S = dA(1:2, 1:2);

e = eig(S); l1 = e(1); l2 = e(2);

ok = 0;

if imag(l1) > (10^4)*eps
    l1 = real(l1); l2 = real(l2);
    if abs(real(l1)) < (10^4)*eps 
        ok = 1;
    end
end
   
if ok == 0
    disp('test_generator_class_division 4 NOT passed');
elseif ok == 1
    disp('test_generator_class_division 4 passed');
end

% test 5: visual assesment of the tangent vector field generated by
% each class.

clear 

% vector fields
dA_1 = generate_rand_dA_cl(1);
dA_2 = generate_rand_dA_cl(2);
dA_3 = generate_rand_dA_cl(3);
dA_4 = generate_rand_dA_cl(4);

ax = int16([-10,10,-10,10]);

[dX,dY] = meshgrid(ax(1):ax(2), ax(3):ax(4));

dU1 = dA_1(1, 1)*dX + dA_1(1, 2)*dY;
dV1 = dA_1(2, 1)*dX + dA_1(2, 2)*dY;

dU2 = dA_2(1, 1)*dX + dA_2(1, 2)*dY;
dV2 = dA_2(2, 1)*dX + dA_2(2, 2)*dY;

dU3 = dA_3(1, 1)*dX + dA_3(1, 2)*dY;
dV3 = dA_3(2, 1)*dX + dA_3(2, 2)*dY;

dU4 = dA_4(1, 1)*dX + dA_4(1, 2)*dY;
dV4 = dA_4(2, 1)*dX + dA_4(2, 2)*dY;

% integral curves:
times = 0:0.1:5;

num_time_points = size(times, 2);
x_0 = 1;
y_0 = 1;

curve_1 = zeros(3,num_time_points);
curve_2 = zeros(3,num_time_points);
curve_3 = zeros(3,num_time_points);
curve_4 = zeros(3,num_time_points);

for t = 1:num_time_points
    curve_1(:, t) = expm(times(t) * dA_1) * [x_0; y_0; 0];
    curve_2(:, t) = expm(times(t) * dA_2) * [x_0; y_0; 0];
    curve_3(:, t) = expm(times(t) * dA_3) * [x_0; y_0; 0];
    curve_4(:, t) = expm(times(t) * dA_4) * [x_0; y_0; 0];
    
end

A_2 = expm(dA_2);
A_3 = expm(dA_3);
A_4 = expm(dA_4);

figure('units','normalized','position',[.1 .1 .7 .7]);
subplot(221)
quiver(dX,dY,dU1,dV1)
hold on
plot(curve_1(1, :), curve_1(2, :))
axis(ax)
title('class 1: node')

subplot(222)
quiver(dX,dY,dU2,dV2)
hold on
plot(curve_2(1, :), curve_2(2, :))
axis(ax)
title('class 2: saddle')

subplot(223)
quiver(dX,dY,dU3,dV3)
hold on
plot(curve_3(1, :), curve_3(2, :))
axis(ax)
title('class 3: spiral')

subplot(224)
quiver(dX,dY,dU4,dV4)
hold on
plot(curve_4(1, :), curve_4(2, :))
axis(ax)
title('class 4: circles')


% test 5: test generate_dA_balanced

clear all

outcome_class = zeros(1,4);
for i=1:1000
    [~,c] = generate_rand_dA_balanced(); 
    c = int16(c);
    outcome_class(1,c) = outcome_class(1,c) + 1;
end

%disp(beans)

figure(3);
bar(outcome_class)
set(gca,'XTickLabel',{'1', '2', '3', '4'});
xlabel('classes');
ylabel('sampling frequency');

% this should provide a histogram with all of the values almost at the same
% heigth.


